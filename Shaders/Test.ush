#pragma once

float3 test_bbs( float2 p ) {
    uint s = p.x * UINT16_MAX;

    for (int i = 0; i < ITERATIONS; i++) {
        s = bbs(s);
    }

    float r = s / UINT16_MAX;
    return float3(r,r,r);
}

float3 test_city( float2 p ) {
    uint s = p.x * UINT_MAX;

    for (int i = 0; i < ITERATIONS; i++) {
        s = city(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_city2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(v).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_city3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(v).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_city4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(v).xxxx;
    }

    return v.xxx / UINT_MAX;
}



float3 test_esgtsa( float2 p ) {
    uint s = p.x * UINT_MAX;

    for (int i = 0; i < ITERATIONS; i++) {
        s = esgtsa(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_fast( float2 p ) {
    for (int i = 0; i < ITERATIONS; i++) {
        p = RandFast(p).xx;
    }

    return float3(p,0.0f);
}

float3 test_hashwithoutsine11 (float2 p) {
    float v = p.x;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine11(v);
    }
    return float3(v,v,v);
}

float3 test_hashwithoutsine12 (float2 p) {
    for (int i = 0; i < ITERATIONS; i++) {
        p = hashwithoutsine12(p).xx;
    }
    return p.xxx;
}

float3 test_hashwithoutsine13 (float2 p) {
    float3 v = p.xyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine13(v.x);
    }
    return v.xxx;
}

float3 test_hashwithoutsine21 (float2 p) {
    for (int i = 0; i < ITERATIONS; i++) {
        p = hashwithoutsine21(p.x);
    }
    return float3(p, 0.0f);
}

float3 test_hashwithoutsine22 (float2 p) {
    for (int i = 0; i < ITERATIONS; i++) {
        p = hashwithoutsine22(p);
    }
    return float3(p, 0.0f);
}

float3 test_hashwithoutsine23 (float2 p) {
    float3 v = p.xyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine23(v).xyx;
    }
    return float3(v.xy,0.0f);
}

float3 test_hashwithoutsine31 (float2 p) {
    float3 v = p.xyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine31(v.x);
    }
    return v.x;
}

float3 test_hashwithoutsine32 (float2 p) {
    float3 v = p.xyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine32(v.yx);
    }
    return v;
}

float3 test_hashwithoutsine33 (float2 p) {
    float3 v = p.xyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine33(v);
    }
    return v;
}

float4 test_hashwithoutsine41 (float2 p) {
    float4 v = p.xyyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine41(v.x);
    }
    return v;
}

float4 test_hashwithoutsine42 (float2 p) {
    float4 v = p.xyyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine42(v.xy);
    }
    return v;
}

float4 test_hashwithoutsine43 (float2 p) {
    float4 v = p.xyyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine43(v.xyz);
    }
    return v;
}

float4 test_hashwithoutsine44 (float2 p) {
    float4 v = p.xyyx;
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine44(v);
    }
    return v;
}

float3 test_hybridtaus( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = hybridtaus(v).xxxx;
    }

    float r = v.x / UINT_MAX;
    return float3(r,r,r);
}

float3 test_ign( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = ign(v).xx;
    }

    return v.xxx;
}

float3 test_iqint1( float2 p ) {
    uint s = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = iqint1(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_iqint2( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v);
    }

    return v / UINT_MAX;
}

float3 test_iqint3( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint3(v).xx;
    }

    float r = v.x / UINT_MAX;
    return float3(r,r,r);
}

float3 test_jkiss32( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = jkiss32(v).xx;
    }

    float r = v.x / UINT_MAX;
    return float3(r,r,r);
}

float3 test_lcg( float2 p ) {
    uint s = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = lcg(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_murmur3( float2 p ) {
    uint v = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(v).x;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(v).xx;
    }

    return v.xxx / UINT_MAX;
}



float3 test_murmur3_3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(v).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(v).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(murmur3(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(murmur3(murmur3(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_murmur3_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(murmur3(murmur3(murmur3(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}




float3 test_pcg3d( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v);
    }

    return v / UINT_MAX;
}

float3 test_pcg3d16( float2 p ) {
    uint3 v = uint3(p.xyx * UINT16_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v);
    }

    return v / UINT16_MAX;
}

float3 test_pcg2d( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg2d(v);
    }

    return float3(v.xy / UINT_MAX, 0.0f);
}

float4 test_pcg4d( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v);
    }

    return v / UINT_MAX;
}

float3 test_pseudo( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = PseudoRandom(v).xx;
    }

    return v.xxx;
}

float3 test_ranlim32( float2 p ) {
    uint s = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = ranlim32(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}



float3 test_superfast( float2 p ) {
    uint s = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = superfast(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_superfast2( float2 p ) {
    uint2 s = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = superfast(s).xx;
    }

    return s.xxx / UINT_MAX;
}

float3 test_superfast3( float2 p ) {
    uint3 s = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = superfast(s).xxx;
    }

    return s.xxx / UINT_MAX;
}

float3 test_superfast4( float2 p ) {
    uint4 s = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = superfast(s).xxxx;
    }

    return s.xxx / UINT_MAX;
}

float3 test_tea( uint t, float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = tea(t,v);
    }

    return float3(v / UINT_MAX, 0.0f);
}

float3 test_trig( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = trig(v).xx;
    }

    return v.xxx;
}

float3 test_wang( float2 p ) {
    uint s = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = wang(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_xorshift128( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift128(v).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xorshift32( float2 p ) {
    uint s = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        s = xorshift32(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_xxhash32_11( float2 p ) {
    uint v = uint(p.x * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xxhash32(v);
    }

    float r = v.x / UINT_MAX;
    return float3(r,r,r);
}

float3 test_xxhash32_12( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xxhash32(v).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xxhash32_13( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xxhash32(v).xxx;
    }

    return v.xxx / UINT_MAX;
}



uint test_hash3mul( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hash3mul(v).z;
    }
    return v;
}

uint test_hash3add( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hash3add(v).z;
    }
    return v;
}


// Single Dimension tests of Multi-Dimension hashes

// iqint2
float test_iqint2_x( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v).xxx;
    }

    return v.x / UINT_MAX;
}

float test_iqint2_y( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v).yyy;
    }

    return v.y / UINT_MAX;
}

float test_iqint2_z( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v).zzz;
    }

    return v.z / UINT_MAX;
}

// pcg3d
float test_pcg3d_x( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v).xxx;
    }

    return v.x / UINT_MAX;
}

float test_pcg3d_y( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v).yyy;
    }

    return v.x / UINT_MAX;
}


float test_pcg3d_z( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v).zzz;
    }

    return v.x / UINT_MAX;
}

// pcg3d16
float test_pcg3d16_x( float2 p ) {
    uint3 v = uint3(p * UINT16_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v).xxx;
    }

    return v.x / UINT16_MAX;
}

float test_pcg3d16_y( float2 p ) {
    uint3 v = uint3(p * UINT16_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v).yyy;
    }

    return v.x / UINT16_MAX;
}


float test_pcg3d16_z( float2 p ) {
    uint3 v = uint3(p * UINT16_MAX, 0u);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v).zzz;
    }

    return v.x / UINT16_MAX;
}

// pcg4d
float test_pcg4d_x( float2 p ) {
    uint4 v = uint4(p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).xxxx;
    }

    return v.x / UINT_MAX;
}

float test_pcg4d_y( float2 p ) {
    uint4 v = uint4(p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).yyyy;
    }

    return v.x / UINT_MAX;
}

float test_pcg4d_z( float2 p ) {
    uint4 v = uint4(p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).zzzz;
    }

    return v.x / UINT_MAX;
}

float test_pcg4d_w( float2 p ) {
    uint4 v = uint4(p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).wwww;
    }

    return v.x / UINT_MAX;
}

// pcg2d
float test_pcg2d_x( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg2d(v).xx;
    }

    return v.x / UINT_MAX;
}

float test_pcg2d_y( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg2d(v).yy;
    }

    return v.x / UINT_MAX;
}

// tea
float test_tea_x( uint t, float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = tea(t,v).xx;
    }

    return v.x / UINT_MAX;
}

float test_tea_y( uint t, float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = tea(t,v).yy;
    }

    return v.x / UINT_MAX;
}

// Linaer2

float3 test_bbs_linear2( float2 p ) {
    uint2 v = uint2(p * UINT16_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(seed(v)).xx;
    }

    return v.xxx / UINT16_MAX;
}

float3 test_city_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_esgtsa_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_iqint1_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_lcg_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_ranlim32_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(seed(v)).xx;
    }

    return v.x / UINT_MAX;
}

float3 test_superfast_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_wang_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xorshift32_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

// Linear3

float3 test_bbs_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT16_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(seed(v)).xxx;
    }

    return v.xxx / UINT16_MAX;
}

float3 test_city_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_esgtsa_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        //v = uint3(esgtsa(seed(v)), v.x, v.y);
        v = esgtsa(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_iqint1_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_lcg_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_ranlim32_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_superfast_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_wang_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xorshift32_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

// Linear4

float3 test_bbs_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT16_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(seed(v)).xxxx;
    }

    return v.xxx / UINT16_MAX;
}

float3 test_city_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_esgtsa_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_iqint1_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_lcg_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_ranlim32_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_superfast_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_wang_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xorshift32_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

// Nested

float3 test_bbs_nested2( float2 p ) {
    uint2 v = uint2(p * UINT16_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(bbs(v.x) + v.y).xx;
    }

    return v.xxx / UINT16_MAX;
}

float3 test_city_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(city(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_esgtsa_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(esgtsa(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_iqint1_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(iqint1(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_lcg_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        //v = lcg(lcg(v.x) + v.y).xx;
        v = uint2(lcg(lcg(v.x) + v.y), v.x);
    }

    return v.xxx / UINT_MAX;
}

float3 test_ranlim32_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(ranlim32(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_superfast_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(superfast(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_wang_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(wang(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xorshift32_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(xorshift32(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

// Nested 3
float3 test_bbs_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT16_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(bbs(bbs(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT16_MAX;
}

float3 test_city_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(city(city(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_esgtsa_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(esgtsa(esgtsa(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_iqint1_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(iqint1(iqint1(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_lcg_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(lcg(lcg(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_ranlim32_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(ranlim32(ranlim32(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_superfast_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(superfast(superfast(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_wang_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(wang(wang(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xorshift32_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(xorshift32(xorshift32(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

// Nested 4
float3 test_bbs_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT16_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(bbs(bbs(bbs(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT16_MAX;
}

float3 test_city_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = city(city(city(city(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_esgtsa_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(esgtsa(esgtsa(esgtsa(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_iqint1_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(iqint1(iqint1(iqint1(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_lcg_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        //v = lcg(lcg(lcg(lcg(v.x) + v.y) + v.z) + v.w).xxxx;
        v = uint4(lcg(lcg(lcg(lcg(v.x) + v.y) + v.z) + v.w), v.x, v.y, v.z);
    }

    return v.xxx / UINT_MAX;
}

float3 test_ranlim32_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(ranlim32(ranlim32(ranlim32(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_superfast_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(superfast(superfast(superfast(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_wang_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(wang(wang(wang(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_xorshift32_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(xorshift32(xorshift32(xorshift32(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float2 test_esgtsa_2( float2 p ) {
    uint2 v = uint2( p * UINT_MAX );

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint2(esgtsa(v.x), esgtsa(v.y));
    }

    return v / UINT_MAX;
}

float3 test_esgtsa_3( float2 p ) {
    uint3 v = uint3( p * UINT_MAX, 0);

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint3(esgtsa(v.x), esgtsa(v.y), esgtsa(v.z));
    }

    return v / UINT_MAX;
}

float3 test_esgtsa_4( float2 p ) {
    uint4 v = uint4( p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint4(esgtsa(v.x), esgtsa(v.y), esgtsa(v.z), esgtsa(v.w));
    }

    return (v.xyz ^ v.w) / UINT_MAX;
}

float2 test_iqint1_2( float2 p ) {
    uint2 v = uint2( p * UINT_MAX );

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint2(iqint1(v.x), iqint1(v.y));
    }

    return v / UINT_MAX;
}

float3 test_iqint1_3( float2 p ) {
    uint3 v = uint3( p * UINT_MAX, 0);

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint3(iqint1(v.x), iqint1(v.y), iqint1(v.z));
    }

    return v / UINT_MAX;
}

float3 test_iqint1_4( float2 p ) {
    uint4 v = uint4( p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint4(iqint1(v.x), iqint1(v.y), iqint1(v.z), iqint1(v.w));
    }

    return (v.xyz ^ v.w) / UINT_MAX;
}

float2 test_lcg_2( float2 p ) {
    uint2 v = uint2( p * UINT_MAX );

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint2(lcg(v.x), lcg(v.y));
    }

    return v / UINT_MAX;
}

float3 test_lcg_3( float2 p ) {
    uint3 v = uint3( p * UINT_MAX, 0);

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint3(lcg(v.x), lcg(v.y), lcg(v.z));
    }

    return v / UINT_MAX;
}

float3 test_lcg_4( float2 p ) {
    uint4 v = uint4( p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = uint4(lcg(v.x), lcg(v.y), lcg(v.z), lcg(v.w));
    }

    return (v.xyz ^ v.w) / UINT_MAX;
}

float2 test_esgtsa_xor2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(v.x * 1597334677u ^ v.y * 3812015801u) * uint2(0x1u, 0x3fffu);
    }

    return v / UINT_MAX;
}

float3 test_esgtsa_xor3( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(v.x * 1597334677u ^ v.y * 3812015801u ^ v.z * 3299493293u) * uint3(0x1u, 0x1ffu, 0x3ffffu);
    }

    return v / UINT_MAX;
}

float3 test_esgtsa_xor4( float2 p ) {
    uint4 v = uint4(p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(v.x * 1597334677u ^ v.y * 3812015801u ^ v.z * 3299493293u ^ v.w) * uint4(0x1u, 0x7fu, 0x3fffu, 0x1fffffu);
    }

    return uint3(v.xyz ^ v.w) / UINT_MAX;
}

float2 test_iqint1_xor2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(v.x * 1597334677u ^ v.y * 3812015801u) * uint2(0x1u, 0x3fffu);
    }

    return v / UINT_MAX;
}

float3 test_iqint1_xor3( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(v.x * 1597334677u ^ v.y * 3812015801u ^ v.z * 3299493293u) * uint3(0x1u, 0x1ffu, 0x3ffffu);
    }

    return v / UINT_MAX;
}

float3 test_iqint1_xor4( float2 p ) {
    uint4 v = uint4(p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(v.x * 1597334677u ^ v.y * 3812015801u ^ v.z * 3299493293u ^ v.w) * uint4(0x1u, 0x7fu, 0x3fffu, 0x1fffffu);
    }

    return uint3(v.xyz ^ v.w) / UINT_MAX;
}

float2 test_lcg_xor2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(v.x * 1597334677u ^ v.y * 3812015801u) * uint2(0x1u, 0x3fffu);
    }

    return v / UINT_MAX;
}

float3 test_lcg_xor3( float2 p ) {
    uint3 v = uint3(p * UINT_MAX, 0);

    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(v.x * 1597334677u ^ v.y * 3812015801u ^ v.z * 3299493293u) * uint3(0x1u, 0x1ffu, 0x3ffffu);
    }

    return v / UINT_MAX;
}

float3 test_lcg_xor4( float2 p ) {
    uint4 v = uint4(p * UINT_MAX, p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(v.x * 1597334677u ^ v.y * 3812015801u ^ v.z * 3299493293u ^ v.w) * uint4(0x1u, 0x7fu, 0x3fffu, 0x1fffffu);
    }

    return uint3(v.xyz ^ v.w) / UINT_MAX;
}

float3 test_pcg( float2 p ) {
    uint s = p.x * UINT_MAX;

    for (int i = 0; i < ITERATIONS; i++) {
        s = pcg(s);
    }

    float r = s / UINT_MAX;
    return float3(r,r,r);
}

float3 test_pcg_linear2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg(seed(v)).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_pcg_linear3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg(seed(v)).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_pcg_linear4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg(seed(v)).xxxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_pcg_nested2( float2 p ) {
    uint2 v = uint2(p * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg(pcg(v.x) + v.y).xx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_pcg_nested3( float2 p ) {
    uint3 v = uint3(p.xyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg(pcg(pcg(v.x) + v.y) + v.z).xxx;
    }

    return v.xxx / UINT_MAX;
}

float3 test_pcg_nested4( float2 p ) {
    uint4 v = uint4(p.xyyx * UINT_MAX);

    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg(pcg(pcg(pcg(v.x) + v.y) + v.z) + v.w).xxxx;
    }

    return v.xxx / UINT_MAX;
}
