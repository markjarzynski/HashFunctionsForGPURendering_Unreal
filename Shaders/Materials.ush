float udRoundBox(float2 p, float2 b, float r)
{
    return length(max(abs(p) - b, 0.0)) - r;
}

float hash( float n ){
	return frac(sin(n)*3538.5453);
}

float hash2( float2 n ) {
    return trig(n);
}

float3 hash3( float3 n ){
	return frac(float3(sin(n.x)*3538.5453, sin(n.y)*2753.8256, sin(n.z)*5296.3728));
}

float mod(float x, float y)
{
  return x - y * floor(x/y);
}

float3 brick( float3 pos ) {
    const float3 brickSize = float3(0.2, 0.34, 2.04);
    const float3 brickStep = float3(0., 0.44, 2.29);
    const float brickBR = 0.05;

    float3 brickCol1 = float3(0.60, 0.27, 0.15);
    float3 brickCol2 = float3(0.45, 0.24, 0.13);
    float3 brickCol3 = float3(0.29, 0.10, 0.04);

    float3 pos2 = pos;
    pos2.yz += 0.07 * hash2(pos.yz * 0.005);
    pos2.z += 0.5 * brickStep.z * floor(0.5 * pos2.y / brickStep.y);
    float2 nb = floor(pos2.yz / brickStep.yz * float2(0.5, 1.));
    float nbBrick = nb.x + nb.y*90.;
    float nbBrickf = pow(hash(nbBrick), 6.);
    float3 brickCol = lerp(brickCol1, brickCol2, nbBrickf);
    brickCol = lerp(brickCol, brickCol3, pow(smoothstep(0.1, 1.05, 1.2 * hash2(pos.yz * 0.18) * hash2(pos.yz * 0.23)), 1.5));
    brickCol *= 0.4 + 0.6 * smoothstep(0.80, 0.60, hash2(pos.yz * 0.07));
    return brickCol;

    /*
    const float3 brickSize = float3(0.2, 0.34, 2.04);
    const float3 brickStep = float3(0., 0.44, 2.29);
    const float brickBR = 0.05;

    float3 brickCol1 = float3(0.60, 0.27, 0.15);
    float3 brickCol2 = float3(0.45, 0.24, 0.13);
    float3 brickCol3 = float3(0.29, 0.10, 0.04);

    float3 pos2 = pos;
    pos2.yz += 0.07 * hash2(pos.yz * 0.005);
    pos2.z += 0.5 * brickStep.z * floor(0.5 * pos2.y / brickStep.y);
    float2 nb = floor(pos2.yz / brickStep.yz * float2(0.5, 1.));
    float nbBrick = nb.x + nb.y*90.;
    float nbBrickf = pow(hash(nbBrick), 6.);
    float3 brickCol = lerp(brickCol1, brickCol2, nbBrickf);
    brickCol = lerp(brickCol, brickCol3, pow(smoothstep(0.1, 1.05, 1.2 * hash2(pos.yz * 0.18) * hash2(pos.yz * 0.23)), 1.5));
    brickCol *= 0.4 + 0.6 * smoothstep(0.80, 0.60, hash2(pos.yz * 0.07));
    return brickCol;
    */

    /*
    float2 brickSize = float2(0.34, 2.04);
    float2 brickStep = float2(0.44, 2.29);
    float brickBR = 0.05;

    float3 brickCol1 = float3(0.60, 0.27, 0.15);
    float3 brickCol2 = float3(0.45, 0.24, 0.13);
    float3 brickCol3 = float3(0.29, 0.10, 0.04);

    pos += 0.07 * pcg2d(pos * 0.05).y;
    pos.y = 0.5 * (brickStep.y + 0.02) * fmod(floor(0.5 * pos.x / brickStep.x), 2.);

    float2 nb = floor(pos / brickStep * float2(0.5, 1.));
    float nbBrick = nb.x * 2. + nb.y * 80.;
    float btd = 1. + 0.3 * (hash(nbBrick) - 0.5);

    pos = fmod(pos, brickStep * float2(2., 1.));
    float bricks = udRoundBox(pos - float2(brickSize.x * 0.5 * btd, brickStep.y), brickSize, brickBR);

    return bricks;
    */

    /*

    float3 pos2 = pos;
    pos2.yz += 0.07 * pcg3d(pos * 0.05).g * 1.0f / float(0xffffffffu);
    pos2.z += 0.5 * brickStep.z * floor(0.5 * pos2.y / brickStep.y);

    float2 nb = floor(pos2.yz / brickStep.yz * float2(0.5, 1.));
    float nbBrick = nb.x + nb.y * 90.;
    float nbBrickf = pow(pcg3d(nbBrick).x, 6.) * 1.0f / float(0xffffffffu);

    float3 brickCol = lerp(brickCol1, brickCol2, nbBrickf);
    brickCol = lerp(brickCol, brickCol3, pow(smoothstep(0.1, 1.05, 1.2 * pcg3d(pos * 0.18).x * pcg3d(pos * 0.23).x), 1.5));
    brickCol *= 0.4 + 0.6 * smoothstep(0.80, 0.60, pcg3d16(pos * 0.07).b);

    return brickCol;


    */


}

float3 brick3_wall( float3 pos, int Hash) {

    return float3(0.65, 0.65, 0.65);

    //return float3(0.3 + 0.7 * myMaterialExpressionVectorNoise(0.9 * pos, 1, 2, 0, 300, Hash).r);// * (0.5 + 0.5 * smoothstep(0., 0.12, myMaterialExpressionVectorNoise(0.3 * pos, 1, 2, 0, 300, Hash).r));

}


float3 brick3( float3 pos, int Hash) {

    const float3 brickSize = float3(0.2, 0.34, 2.04);
    const float3 brickStep = float3(0.3, 0.44, 2.29);
    const float brickBR = 0.05;

    float3 brickCol1 = float3(0.60, 0.27, 0.15);
    float3 brickCol2 = float3(0.45, 0.24, 0.13);
    float3 brickCol3 = float3(0.29, 0.10, 0.04);

    //float3 wallColor = float3(0.3 + 0.7 * myMaterialExpressionVectorNoise(0.9 * pos, 1, 2, 0, 300, Hash).r) * (0.5 + 0.5 * smoothstep(0., 0.12, myMaterialExpressionVectorNoise(0.3 * pos, 1, 2, 0, 300, Hash).r));

    float3 pos2 = pos;
    pos2 += 0.07 * myMaterialExpressionVectorNoise(pos2 * 0.05, 1, 2, 0, 300, Hash).g;
    pos2.z += 0.5 * brickStep.z * floor(0.5 * pos2.y / brickStep.y);
    float3 nb = floor(pos2 / brickStep * float3(0.5, 0.5, 1.));
    float nbBrick = nb.x + nb.y * 90.;
    float nbBrickf = pow(hash(nbBrick), 6.);
    float3 brickCol = lerp(brickCol1, brickCol2, nbBrickf);
    brickCol = lerp(brickCol, brickCol3, pow(smoothstep(0.1, 1.05, 1.2 * myMaterialExpressionVectorNoise(pos2 * 0.18, 1, 2, 0, 300, Hash).x * myMaterialExpressionVectorNoise(pos2 * 0.23, 1, 2, 0, 300, Hash).x), 1.5));
    brickCol *= 0.4 + 0.6 * smoothstep(0.80, 0.60, myMaterialExpressionVectorNoise(pos * 0.07, 1, 2, 0, 300, Hash).b);

    return brickCol;

    /*
    pos2 = pos;
    pos2 += 0.07 * myMaterialExpressionVectorNoise(pos2 * 0.005, 1, 2, 0, 300, Hash).g;
    pos2.z += 0.5 * (brickStep.z + 0.02) * mod(floor(0.5 * pos2.y / brickStep.y), 2.);

    nb = floor(pos2 / brickStep * float3(0.5, 0.5, 1.));
    nbBrick = nb.x * 2. + nb.y * 80.;
    float btd = 1. + 0.3 * (hash(nbBrick) - 0.5);

    pos2 = mod(pos2, brickStep * float3(2., 2., 1.));
    float bricks = udRoundBox(pos2 - float3(brickSize.x * 0.5 * btd, brickStep.y, brickStep.z), brickSize, brickBR);

    bricks += 0.01 * smoothstep(0.1, 0.95, myMaterialExpressionVectorNoise( pos * 0.18, 1, 2, 0, 300, Hash).r + 0.6 * myMaterialExpressionVectorNoise(0.2 * pos, 1, 2, 0, 300, Hash).r) * smoothstep(-0.2, -0.23, pos.x - brickSize.x * 0.5 * btd);
    */
}
