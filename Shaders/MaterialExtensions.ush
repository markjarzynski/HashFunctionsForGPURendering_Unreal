#include "/Project/Random.ush"

#define ITERATIONS 10000

uint test_bbs( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(v);
    }

    return v;
}

uint test_city( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = city(v);
    }
    return v;
}

float test_RandFast ( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = RandFast(v).xx;
    }
    return v.x;
}

float test_ign( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = ign(v).xx;
    }

    return v.x;
}

uint test_iqint1( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(v);
    }
    return v;
}

uint3 test_iqint2( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v);
    }

    return v;
}

uint test_iqint3( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint3(v);
    }
    return v;
}

uint test_jkiss32( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = jkiss32(v).xx;
    }

    return v.y;
}

uint test_lcg( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(v).xx;
    }

    return v.y;
}

uint test_murmur3( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(v).xx;
    }
    return v.x;
}

uint3 test_pcg3d( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v);
    }

    return v;
}

uint3 test_pcg3d16( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v);
    }

    return v;
}

float test_PseudoRandom( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = PseudoRandom(v).xx;
    }

    return v.y;
}

uint3 test_Rand3DPCG16( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = Rand3DPCG16(v);
    }

    return v;
}

uint3 test_Rand3DPCG32( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = Rand3DPCG32(v);
    }

    return v;
}

uint test_ranlim32( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(v).xx;
    }

    return v.y;
}

uint test_sca08( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = sca08(v);
    }

    return v;
}

uint test_superfast( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(v);
    }
    return v;
}

uint2 test_tea( uint tea, uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {

        //v = tea(tea,v).xyy;

        uint3 p = v;
        uint s = p.z;

        for( uint i = 0; i < tea; i++) {
            s += 0x9E3779B9u;
            p.x += (p.y<<4u)^(p.y+s)^(p.y>>5u);
            p.y += (p.x<<4u)^(p.x+s)^(p.x>>5u);
        }

        v = p.xyy;
    }

    return v.xy;
}

float test_trig( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = trig(v).xx;
    }

    return v.y;
}

uint test_wang(uint v) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(v);
    }

    return v;
}

uint test_xorshift128(uint2 v) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift128(v).xx;
    }

    return v.y;
}

uint test_xorshift32(uint v) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(v);
    }

    return v;
}

float3 test_hashwithoutsine( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine(v.xy);
    }
    return v;
}

uint test_hybridtaus( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hybridtaus(v).xxxx;
    }
    return v.x;
}

uint test_pcg2d( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg2d(v);
    }
    return v.y;
}

uint3 test_pcg4d( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v);
    }
    return v.yzw;
}
