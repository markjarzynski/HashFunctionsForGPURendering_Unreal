#include "/Project/Random.ush"

#define ITERATIONS 10000

uint test_bbs( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = bbs(v);
    }

    return v;
}

uint test_city( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = city(v);
    }
    return v;
}

float test_RandFast ( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = RandFast(v).xx;
    }
    return v.x;
}

float test_ign( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = ign(v).xx;
    }

    return v.x;
}

uint test_iqint1( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint1(v);
    }
    return v;
}

uint3 test_iqint2( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v);
    }

    return v;
}

uint test_iqint2x( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v).xxx;
    }

    return v.x;
}

uint test_iqint2y( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v).yyy;
    }

    return v.y;
}

uint test_iqint2z( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint2(v).zzz;
    }

    return v.z;
}

uint test_iqint3( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = iqint3(v);
    }
    return v;
}

uint test_jkiss32( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = jkiss32(v).xx;
    }

    return v.y;
}

uint test_lcg( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = lcg(v).xx;
    }

    return v.y;
}

uint test_murmur3( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = murmur3(v).xx;
    }
    return v.x;
}

uint3 test_pcg3d( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v);
    }
    return v;
}

float3 test_pcg3df( float3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3df(v);
    }
    return v;
}

uint test_pcg3dx( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v).xxx;
    }
    return v.x;
}

uint test_pcg3dy( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v).yyy;
    }
    return v.y;
}

uint test_pcg3dz( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v).zzz;
    }
    return v.z;
}

uint3 test_pcg3d16( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v);
    }

    return v;
}

uint test_pcg3d16x( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v).xxx;
    }
    return v.x;
}

uint test_pcg3d16y( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d16(v).yyy;
    }
    return v.y;
}

uint test_pcg3d16z( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg3d(v).zzz;
    }
    return v.z;
}

float test_PseudoRandom( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = PseudoRandom(v).xx;
    }

    return v.y;
}

uint3 test_Rand3DPCG16( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = Rand3DPCG16(v);
    }

    return v;
}

uint3 test_Rand3DPCG32( uint3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = Rand3DPCG32(v);
    }

    return v;
}

uint3 test_Rand4DPCG32( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = Rand4DPCG32(v);
    }

    return v.yzw;
}

uint test_ranlim32( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = ranlim32(v).xx;
    }

    return v.y;
}

uint test_esgtsa( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = esgtsa(v);
    }

    return v;
}

uint test_superfast( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = superfast(v);
    }
    return v;
}

uint2 test_tea( uint t, uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = tea(t,v);
    }
    return v.xy;
}

uint test_teax( uint t, uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = tea(t,v).xx;
    }
    return v.x;
}

uint test_teay( uint t, uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = tea(t,v).yy;
    }
    return v.y;
}

float test_trig( float2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = trig(v).xx;
    }

    return v.y;
}

uint test_wang(uint v) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = wang(v);
    }

    return v;
}

uint test_xorshift128(uint2 v) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift128(v).xx;
    }

    return v.y;
}

uint test_xorshift32(uint v) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = xorshift32(v);
    }
    return v;
}

uint test_xxhash32(uint2 v) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = xxhash32(v).xx;
    }
    return v.x;
}

float3 test_hashwithoutsine( float3 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hashwithoutsine(v.xy);
    }
    return v;
}

uint test_hybridtaus( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hybridtaus(v).xxxx;
    }
    return v.x;
}

uint test_pcg2d( uint2 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg2d(v);
    }
    return v.y;
}

uint3 test_pcg4d( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v);
    }
    return v.yzw;
}

uint test_pcg4dx( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).xxxx;
    }
    return v.x;
}

uint test_pcg4dy( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).yyyy;
    }
    return v.y;
}

uint test_pcg4dz( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).zzzz;
    }
    return v.z;
}

uint test_pcg4dw( uint4 v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = pcg4d(v).wwww;
    }
    return v.w;
}

uint test_hash3mul uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hash3add(v).z;
    }
    return v;
}

uint test_hash3add( uint v ) {
    for (int i = 0; i < ITERATIONS; i++) {
        v = hash3mul(v).z;
    }
    return v;
}
